// vite.config.js
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import fs from "fs";
import path from "path";
import { execSync } from "child_process";
var vite_config_default = defineConfig({
  plugins: [react()],
  server: {
    port: 3e3,
    strictPort: true,
    https: generateCerts(),
    proxy: {
      "/api": {
        changeOrigin: true,
        secure: false,
        rewrite: (path2) => path2.replace(/^\/api/, "/api"),
        target: process.env.ASPNETCORE_HTTPS_PORT ? `https://localhost:${process.env.ASPNETCORE_HTTPS_PORT}` : process.env.ASPNETCORE_URLS ? process.env.ASPNETCORE_URLS.split(";")[0] : "http://localhost:40457"
      }
    }
  }
});
function generateCerts() {
  const baseFolder = process.env.APPDATA !== void 0 && process.env.APPDATA !== "" ? `${process.env.APPDATA}/ASP.NET/https` : `${process.env.HOME}/.aspnet/https`;
  const certificateArg = process.argv.map((arg) => arg.match(/--name=(?<value>.+)/i)).filter(Boolean)[0];
  const certificateName = certificateArg ? certificateArg.groups.value : process.env.npm_package_name;
  if (!certificateName) {
    console.error(
      "Invalid certificate name. Run this script in the context of an npm/yarn script or pass --name=<<app>> explicitly."
    );
    process.exit(-1);
  }
  const certFilePath = path.join(baseFolder, `${certificateName}.pem`);
  const keyFilePath = path.join(baseFolder, `${certificateName}.key`);
  if (!fs.existsSync(certFilePath) || !fs.existsSync(keyFilePath)) {
    const outp = execSync(
      "dotnet " + [
        "dev-certs",
        "https",
        "--export-path",
        certFilePath,
        "--format",
        "Pem",
        "--no-password"
      ].join(" ")
    );
    console.log(outp.toString());
  }
  return {
    cert: fs.readFileSync(certFilePath, "utf8"),
    key: fs.readFileSync(keyFilePath, "utf8")
  };
}
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFx4XFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxMb2NhbCBzb3VjZVxcXFxGdWxsc3RhY2tfUHJvamVjdFxcXFxCb29rU3RvcmVcXFxcQ2xpZW50QXBwXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFx4XFxcXE9uZURyaXZlXFxcXERvY3VtZW50c1xcXFxMb2NhbCBzb3VjZVxcXFxGdWxsc3RhY2tfUHJvamVjdFxcXFxCb29rU3RvcmVcXFxcQ2xpZW50QXBwXFxcXHZpdGUuY29uZmlnLmpzXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ltcG9ydF9tZXRhX3VybCA9IFwiZmlsZTovLy9DOi9Vc2Vycy94L09uZURyaXZlL0RvY3VtZW50cy9Mb2NhbCUyMHNvdWNlL0Z1bGxzdGFja19Qcm9qZWN0L0Jvb2tTdG9yZS9DbGllbnRBcHAvdml0ZS5jb25maWcuanNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcgfSBmcm9tIFwidml0ZVwiO1xyXG5pbXBvcnQgcmVhY3QgZnJvbSBcIkB2aXRlanMvcGx1Z2luLXJlYWN0XCI7XHJcblxyXG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XHJcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCB7IGV4ZWNTeW5jIH0gZnJvbSBcImNoaWxkX3Byb2Nlc3NcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XHJcbiAgICBwbHVnaW5zOiBbcmVhY3QoKV0sXHJcbiAgICBzZXJ2ZXI6IHtcclxuICAgICAgICBwb3J0OiAzMDAwLFxyXG4gICAgICAgIHN0cmljdFBvcnQ6IHRydWUsXHJcbiAgICAgICAgaHR0cHM6IGdlbmVyYXRlQ2VydHMoKSxcclxuICAgICAgICBwcm94eToge1xyXG4gICAgICAgICAgICAvLyBwcm94eSBBUEkgcmVxdWVzdHMgdG8gdGhlIEFTUC5ORVQgYmFja2VuZFxyXG4gICAgICAgICAgICBcIi9hcGlcIjoge1xyXG4gICAgICAgICAgICAgICAgY2hhbmdlT3JpZ2luOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc2VjdXJlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgIHJld3JpdGU6IChwYXRoKSA9PiBwYXRoLnJlcGxhY2UoL15cXC9hcGkvLCBcIi9hcGlcIiksXHJcbiAgICAgICAgICAgICAgICAvLyB0YXJnZXQgdGFrZW4gZnJvbSBzcmMvc2V0dXBQcm94eS5qcyBpbiBBU1AuTkVUIFJlYWN0IHRlbXBsYXRlXHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IHByb2Nlc3MuZW52LkFTUE5FVENPUkVfSFRUUFNfUE9SVFxyXG4gICAgICAgICAgICAgICAgICAgID8gYGh0dHBzOi8vbG9jYWxob3N0OiR7cHJvY2Vzcy5lbnYuQVNQTkVUQ09SRV9IVFRQU19QT1JUfWBcclxuICAgICAgICAgICAgICAgICAgICA6IHByb2Nlc3MuZW52LkFTUE5FVENPUkVfVVJMU1xyXG4gICAgICAgICAgICAgICAgICAgICAgICA/IHByb2Nlc3MuZW52LkFTUE5FVENPUkVfVVJMUy5zcGxpdChcIjtcIilbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgOiBcImh0dHA6Ly9sb2NhbGhvc3Q6NDA0NTdcIixcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxufSk7XHJcblxyXG4vKiogRnVuY3Rpb24gdGFrZW4gZnJvbSBhc3BuZXRjb3JlLWh0dHBzLmpzIGluIEFTUC5ORVQgUmVhY3QgdGVtcGxhdGUgKi9cclxuZnVuY3Rpb24gZ2VuZXJhdGVDZXJ0cygpIHtcclxuICAgIGNvbnN0IGJhc2VGb2xkZXIgPVxyXG4gICAgICAgIHByb2Nlc3MuZW52LkFQUERBVEEgIT09IHVuZGVmaW5lZCAmJiBwcm9jZXNzLmVudi5BUFBEQVRBICE9PSBcIlwiXHJcbiAgICAgICAgICAgID8gYCR7cHJvY2Vzcy5lbnYuQVBQREFUQX0vQVNQLk5FVC9odHRwc2BcclxuICAgICAgICAgICAgOiBgJHtwcm9jZXNzLmVudi5IT01FfS8uYXNwbmV0L2h0dHBzYDtcclxuICAgIGNvbnN0IGNlcnRpZmljYXRlQXJnID0gcHJvY2Vzcy5hcmd2XHJcbiAgICAgICAgLm1hcCgoYXJnKSA9PiBhcmcubWF0Y2goLy0tbmFtZT0oPzx2YWx1ZT4uKykvaSkpXHJcbiAgICAgICAgLmZpbHRlcihCb29sZWFuKVswXTtcclxuICAgIGNvbnN0IGNlcnRpZmljYXRlTmFtZSA9IGNlcnRpZmljYXRlQXJnXHJcbiAgICAgICAgPyBjZXJ0aWZpY2F0ZUFyZy5ncm91cHMudmFsdWVcclxuICAgICAgICA6IHByb2Nlc3MuZW52Lm5wbV9wYWNrYWdlX25hbWU7XHJcblxyXG4gICAgaWYgKCFjZXJ0aWZpY2F0ZU5hbWUpIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKFxyXG4gICAgICAgICAgICBcIkludmFsaWQgY2VydGlmaWNhdGUgbmFtZS4gUnVuIHRoaXMgc2NyaXB0IGluIHRoZSBjb250ZXh0IG9mIGFuIG5wbS95YXJuIHNjcmlwdCBvciBwYXNzIC0tbmFtZT08PGFwcD4+IGV4cGxpY2l0bHkuXCJcclxuICAgICAgICApO1xyXG4gICAgICAgIHByb2Nlc3MuZXhpdCgtMSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgY2VydEZpbGVQYXRoID0gcGF0aC5qb2luKGJhc2VGb2xkZXIsIGAke2NlcnRpZmljYXRlTmFtZX0ucGVtYCk7XHJcbiAgICBjb25zdCBrZXlGaWxlUGF0aCA9IHBhdGguam9pbihiYXNlRm9sZGVyLCBgJHtjZXJ0aWZpY2F0ZU5hbWV9LmtleWApO1xyXG5cclxuICAgIGlmICghZnMuZXhpc3RzU3luYyhjZXJ0RmlsZVBhdGgpIHx8ICFmcy5leGlzdHNTeW5jKGtleUZpbGVQYXRoKSkge1xyXG4gICAgICAgIGNvbnN0IG91dHAgPSBleGVjU3luYyhcclxuICAgICAgICAgICAgXCJkb3RuZXQgXCIgK1xyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgICBcImRldi1jZXJ0c1wiLFxyXG4gICAgICAgICAgICAgICAgXCJodHRwc1wiLFxyXG4gICAgICAgICAgICAgICAgXCItLWV4cG9ydC1wYXRoXCIsXHJcbiAgICAgICAgICAgICAgICBjZXJ0RmlsZVBhdGgsXHJcbiAgICAgICAgICAgICAgICBcIi0tZm9ybWF0XCIsXHJcbiAgICAgICAgICAgICAgICBcIlBlbVwiLFxyXG4gICAgICAgICAgICAgICAgXCItLW5vLXBhc3N3b3JkXCIsXHJcbiAgICAgICAgICAgIF0uam9pbihcIiBcIilcclxuICAgICAgICApO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKG91dHAudG9TdHJpbmcoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBjZXJ0OiBmcy5yZWFkRmlsZVN5bmMoY2VydEZpbGVQYXRoLCBcInV0ZjhcIiksXHJcbiAgICAgICAga2V5OiBmcy5yZWFkRmlsZVN5bmMoa2V5RmlsZVBhdGgsIFwidXRmOFwiKSxcclxuICAgIH07XHJcbn0iXSwKICAibWFwcGluZ3MiOiAiO0FBQW1iLFNBQVMsb0JBQW9CO0FBQ2hkLE9BQU8sV0FBVztBQUVsQixPQUFPLFFBQVE7QUFDZixPQUFPLFVBQVU7QUFDakIsU0FBUyxnQkFBZ0I7QUFFekIsSUFBTyxzQkFBUSxhQUFhO0FBQUEsRUFDeEIsU0FBUyxDQUFDLE1BQU0sQ0FBQztBQUFBLEVBQ2pCLFFBQVE7QUFBQSxJQUNKLE1BQU07QUFBQSxJQUNOLFlBQVk7QUFBQSxJQUNaLE9BQU8sY0FBYztBQUFBLElBQ3JCLE9BQU87QUFBQSxNQUVILFFBQVE7QUFBQSxRQUNKLGNBQWM7QUFBQSxRQUNkLFFBQVE7QUFBQSxRQUNSLFNBQVMsQ0FBQ0EsVUFBU0EsTUFBSyxRQUFRLFVBQVUsTUFBTTtBQUFBLFFBRWhELFFBQVEsUUFBUSxJQUFJLHdCQUNkLHFCQUFxQixRQUFRLElBQUksMEJBQ2pDLFFBQVEsSUFBSSxrQkFDUixRQUFRLElBQUksZ0JBQWdCLE1BQU0sR0FBRyxFQUFFLEtBQ3ZDO0FBQUEsTUFDZDtBQUFBLElBQ0o7QUFBQSxFQUNKO0FBQ0osQ0FBQztBQUdELFNBQVMsZ0JBQWdCO0FBQ3JCLFFBQU0sYUFDRixRQUFRLElBQUksWUFBWSxVQUFhLFFBQVEsSUFBSSxZQUFZLEtBQ3ZELEdBQUcsUUFBUSxJQUFJLDBCQUNmLEdBQUcsUUFBUSxJQUFJO0FBQ3pCLFFBQU0saUJBQWlCLFFBQVEsS0FDMUIsSUFBSSxDQUFDLFFBQVEsSUFBSSxNQUFNLHNCQUFzQixDQUFDLEVBQzlDLE9BQU8sT0FBTyxFQUFFO0FBQ3JCLFFBQU0sa0JBQWtCLGlCQUNsQixlQUFlLE9BQU8sUUFDdEIsUUFBUSxJQUFJO0FBRWxCLE1BQUksQ0FBQyxpQkFBaUI7QUFDbEIsWUFBUTtBQUFBLE1BQ0o7QUFBQSxJQUNKO0FBQ0EsWUFBUSxLQUFLLEVBQUU7QUFBQSxFQUNuQjtBQUVBLFFBQU0sZUFBZSxLQUFLLEtBQUssWUFBWSxHQUFHLHFCQUFxQjtBQUNuRSxRQUFNLGNBQWMsS0FBSyxLQUFLLFlBQVksR0FBRyxxQkFBcUI7QUFFbEUsTUFBSSxDQUFDLEdBQUcsV0FBVyxZQUFZLEtBQUssQ0FBQyxHQUFHLFdBQVcsV0FBVyxHQUFHO0FBQzdELFVBQU0sT0FBTztBQUFBLE1BQ1QsWUFDQTtBQUFBLFFBQ0k7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxRQUNBO0FBQUEsUUFDQTtBQUFBLFFBQ0E7QUFBQSxNQUNKLEVBQUUsS0FBSyxHQUFHO0FBQUEsSUFDZDtBQUNBLFlBQVEsSUFBSSxLQUFLLFNBQVMsQ0FBQztBQUFBLEVBQy9CO0FBRUEsU0FBTztBQUFBLElBQ0gsTUFBTSxHQUFHLGFBQWEsY0FBYyxNQUFNO0FBQUEsSUFDMUMsS0FBSyxHQUFHLGFBQWEsYUFBYSxNQUFNO0FBQUEsRUFDNUM7QUFDSjsiLAogICJuYW1lcyI6IFsicGF0aCJdCn0K
